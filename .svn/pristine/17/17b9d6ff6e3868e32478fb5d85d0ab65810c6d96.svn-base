import Config from "../../config/config";
import App from "../../manager/App";
import FramingManager from "../../manager/FramingManager";
import RES from "../../res/RES";
import BaseUI from "../BaseUI";

const { ccclass, property } = cc._decorator;

@ccclass
export default class ConvertView extends BaseUI {
    private closeBtn: cc.Node = null;
    private cardBtn: cc.Node = null;
    private hint: cc.Node;
    private woodBtn: cc.Node = null;
    private phoneBtn: cc.Node = null;
    private trimming: cc.Node = null;
    private scrollItem: cc.Node = null;
    private scrollContent: cc.Node = null;
    private userPic: cc.Node = null;
    private giftPoupon: cc.Node = null;
    private confirmConvert: cc.Node = null;
    private addressInfo: cc.Node;
    private confrimType: String = 'wood';
    private goodsList = {};
    private closeConfirm: cc.Node = null;
    private confirmBtn: cc.Node = null;
    private phoneNum: cc.Node;
    private woodName: cc.Node;
    private goodsRid: Number;
    private boradcast: cc.Node;
    private boradcastItem: cc.Node
    private viewContent: cc.Node
    private editAddress: cc.Node
    private closeEdit: cc.Node
    private optionsName: cc.Node
    private optionsPhone: cc.Node
    private optionsAddr: cc.Node
    private optionsDetail: cc.Node
    private optionsHint: cc.Node
    private confirmEdit: cc.Node
    private chooseAddress: cc.Node
    private userAddrInfo = {}


    protected validateUI(): void {
        this.viewContent = this.node.getChildByName('viewContent')
        this.boradcast = this.viewContent.getChildByName('borad_cast').getChildByName('scrollview').getChildByName('view').getChildByName('content')
        this.boradcastItem = this.viewContent.getChildByName('boradcastContent')
        this.closeBtn = this.viewContent.getChildByName('icon_close')
        this.cardBtn = this.viewContent.getChildByName('card')
        this.woodBtn = this.viewContent.getChildByName('wood')
        this.phoneBtn = this.viewContent.getChildByName('phone')
        this.scrollItem = this.viewContent.getChildByName('scrollItem')
        this.scrollContent = this.viewContent.getChildByName('scrollview').getChildByName('view').getChildByName('content')
        this.userPic = this.viewContent.getChildByName('picMask').getChildByName('userPic')
        this.giftPoupon = this.viewContent.getChildByName('number')
        this.trimming = this.viewContent.getChildByName('img_graphics')
        this.confirmConvert = this.node.getChildByName('confirmConvert')
        this.closeConfirm = this.confirmConvert.getChildByName('close')
        this.confirmBtn = this.confirmConvert.getChildByName('bt_sure')
        this.phoneNum = this.confirmConvert.getChildByName('editbox')
        this.woodName = this.confirmConvert.getChildByName('woodName')
        this.hint = this.confirmConvert.getChildByName('hint')
        this.addressInfo = this.confirmConvert.getChildByName('address_info')
        this.editAddress = this.node.getChildByName('editAddress')
        this.closeEdit = this.editAddress.getChildByName('editView').getChildByName('close')
        this.optionsName = this.editAddress.getChildByName('editView').getChildByName('optionsName').getChildByName('editbox')
        this.optionsPhone = this.editAddress.getChildByName('editView').getChildByName('optionsPhone').getChildByName('editbox')
        this.optionsAddr = this.editAddress.getChildByName('editView').getChildByName('optionsAddr').getChildByName('editbox')
        this.optionsDetail = this.editAddress.getChildByName('editView').getChildByName('optionsDetail').getChildByName('editbox')
        this.optionsHint = this.editAddress.getChildByName('editView').getChildByName('optionsHint').getChildByName('editbox')
        this.confirmEdit = this.editAddress.getChildByName('editView').getChildByName('confirm')
        this.chooseAddress = this.confirmConvert.getChildByName('chooseAddress')
    }
    protected updateView(): void {
        this.getAllConvertLog()
        this.getConvertList()
        RES.loadHead(App.gdata.userInfo.userinfo.headimg, this.userPic.getComponent(cc.Sprite))
        this.giftPoupon.getComponent(cc.Label).string = App.gdata.userInfo.giftcoupon
    }
    protected initEvent(): void {
        this.closeBtn.on("click", this.close, this);
        this.confirmBtn.on("click", this.confirmToConvert, this);
        this.closeConfirm.on("click", this.closeConfirmView, this);
        this.phoneBtn.on("click", this.chooseOption, this)
        this.woodBtn.on("click", this.chooseOption, this)
        this.cardBtn.on("click", this.chooseOption, this)
        this.closeEdit.on('click', this.closeEditAddress, this)
        this.confirmEdit.on("click", this.confirmAddress, this)
        this.chooseAddress.on("click", this.openAddressView, this)
    }
    protected removeEvent(): void {
        this.closeBtn.off("click", this.close, this);
        this.confirmBtn.off("click", this.confirmToConvert, this);
        this.phoneBtn.off("click", this.chooseOption, this)
        this.woodBtn.off("click", this.chooseOption, this)
        this.cardBtn.off("click", this.chooseOption, this)
        this.closeConfirm.off("click", this.closeConfirmView, this);
        this.closeEdit.off('click', this.closeEditAddress, this)
        this.confirmEdit.off("click", this.confirmAddress, this)
        this.chooseAddress.off("click", this.openAddressView, this)
        this.scrollContent.children.forEach(item => {
            item.off("click", this.chooseGoods, this);
        })
    }
    private getConvertList(): void {
        this.scrollContent.removeAllChildren()
        let onSuccess = (res) => {
            this.goodsList['wood'] = res.gifts.filter((item, index) => {
                return item.type === 4
            })
            this.goodsList['phone'] = res.gifts.filter((item, index) => {
                return item.type === 0
            })
            this.goodsList['card'] = res.gifts.filter((item, index) => {
                return item.type !== 4 && item.type !== 0
            })
            FramingManager.updateRecordList(this.goodsList['wood'], this.getWoodItem, this)
        }
        App.GiftCouponProxy.getGiftList({ onSuccess })
    }
    private chooseOption(event): void {
        this.scrollContent.removeAllChildren()
        if (event.node === this.woodBtn) {
            this.confrimType = 'wood'
            this.woodBtn.color = new cc.Color(51, 51, 51, 255)
            this.cardBtn.color = new cc.Color(255, 171, 171, 255)
            this.phoneBtn.color = new cc.Color(255, 171, 171, 255)
            this.woodBtn.getComponent(cc.Label).fontSize = 40
            this.cardBtn.getComponent(cc.Label).fontSize = 36
            this.phoneBtn.getComponent(cc.Label).fontSize = 36
            this.trimming.x = -200
            FramingManager.updateRecordList(this.goodsList['wood'], this.getWoodItem, this)
        } else if (event.node === this.cardBtn) {
            this.confrimType = 'card'
            this.cardBtn.color = new cc.Color(51, 51, 51, 255)
            this.woodBtn.color = new cc.Color(255, 171, 171, 255)
            this.phoneBtn.color = new cc.Color(255, 171, 171, 255)
            this.cardBtn.getComponent(cc.Label).fontSize = 40
            this.woodBtn.getComponent(cc.Label).fontSize = 36
            this.cardBtn.getComponent(cc.Label).fontSize = 36
            this.trimming.x = 0
            FramingManager.updateRecordList(this.goodsList['card'], this.getWoodItem, this)
        } else if (event.node === this.phoneBtn) {
            this.confrimType = 'phone'
            this.cardBtn.color = new cc.Color(255, 171, 171, 255)
            this.woodBtn.color = new cc.Color(255, 171, 171, 255)
            this.phoneBtn.color = new cc.Color(51, 51, 51, 255)
            this.phoneBtn.getComponent(cc.Label).fontSize = 40
            this.cardBtn.getComponent(cc.Label).fontSize = 36
            this.woodBtn.getComponent(cc.Label).fontSize = 36
            this.trimming.x = 200
            FramingManager.updateRecordList(this.goodsList['phone'], this.getWoodItem, this)
        }
    }
    private getWoodItem(data): void {
        let itemCopy = cc.instantiate(this.scrollItem)
        itemCopy.active = true
        let pic = itemCopy.getChildByName('goodsPic')
        let name = itemCopy.getChildByName('goodsName')
        let leftNums = itemCopy.getChildByName('leftNums')
        let hot = itemCopy.getChildByName('hot')
        let price = itemCopy.getChildByName('price')
        let couponText = itemCopy.getChildByName('couponText')
        itemCopy.on("click", this.chooseGoods, this);
        RES.loadHead(data.imgurl, pic.getComponent(cc.Sprite))
        name.getComponent(cc.Label).string = data.name
        leftNums.getComponent(cc.Label).string = `剩余${data.leftinventory}份`
        hot.getComponent(cc.Label).string = `月兑${data.sells}份`
        if (data.price > 9999) {
            price.getComponent(cc.Label).string = data.price / 10000 + ''
            couponText.getComponent(cc.Label).string = '万礼券'
        } else {
            price.getComponent(cc.Label).string = data.price
            couponText.getComponent(cc.Label).string = '礼券'
        }
        this.scrollContent.addChild(itemCopy)
    }
    private chooseGoods(event) {
        this.confirmConvert.active = true
        let pic = this.confirmConvert.getChildByName('goodsPic')
        let title = this.confirmConvert.getChildByName('title')
        this.scrollContent.children.forEach((item, index) => {
            if (event.node === item) {
                if (this.confrimType === 'wood') {
                    this.goodsList['wood'].forEach((items, indexs) => {
                        if (index === indexs) {
                            RES.loadHead(items.imgurl, pic.getComponent(cc.Sprite))
                            title.getComponent(cc.Label).string = '兑换实物'
                            this.woodName.getComponent(cc.Label).string = items.name
                            this.woodName.active = true
                            this.phoneNum.active = false
                            this.hint.active = false
                            this.addressInfo.active = true
                            this.chooseAddress.active = true
                            this.goodsRid = items.rid
                            this.confirmBtn.y = -260
                        }
                    });
                } else if (this.confrimType === 'card') {
                    this.goodsList['card'].forEach((items, indexs) => {
                        if (index === indexs) {
                            RES.loadHead(items.imgurl, pic.getComponent(cc.Sprite))
                            title.getComponent(cc.Label).string = '兑换卡券'
                            this.phoneNum.active = true
                            this.hint.active = true
                            this.addressInfo.active = false
                            this.chooseAddress.active = false
                            this.woodName.active = false
                            this.goodsRid = items.rid
                            this.confirmBtn.y = -146
                        }
                    });
                } else if (this.confrimType === 'phone') {
                    this.goodsList['phone'].forEach((items, indexs) => {
                        if (index === indexs) {
                            RES.loadHead(items.imgurl, pic.getComponent(cc.Sprite))
                            title.getComponent(cc.Label).string = '兑换话费'
                            this.phoneNum.active = true
                            this.hint.active = true
                            this.addressInfo.active = false
                            this.chooseAddress.active = false
                            this.woodName.active = false
                            this.goodsRid = items.rid
                            this.confirmBtn.y = -146
                        }
                    });
                }
            }
        })
    }
    private closeConfirmView(): void {
        this.confirmConvert.active = false
    }
    private confirmToConvert(): void {
        if (this.addressInfo.active) {
            if (Object.keys(this.userAddrInfo).length === 0) return
            let onSuccess = (res) => {
                console.log('兑换结果实物:', res);
            }
            App.GiftCouponProxy.convertGift({
                onSuccess, data: {
                    rid: this.goodsRid, phone: this.userAddrInfo['phone'],
                    name: this.userAddrInfo['name'], address: this.userAddrInfo['addr'] + this.userAddrInfo['detail'], remark: this.userAddrInfo['hint']
                }
            })
        } else {
            let phone = this.phoneNum.getComponent(cc.EditBox).string
            let onSuccess = (res) => {
                console.log('兑换结果:', res);
            }
            App.GiftCouponProxy.convertGift({ onSuccess, data: { rid: this.goodsRid, phone } })
        }
    }
    private getAllConvertLog() {
        this.boradcast.removeAllChildren()
        this.boradcast.stopAllActions()
        this.boradcast.setPosition(cc.v2(0, 24))
        let onSuccess = (res) => {
            res.list.forEach((item, index) => {
                let itemCopy = cc.instantiate(this.boradcastItem)
                itemCopy.active = true
                let text = itemCopy.getChildByName('boradcastText')
                text.getComponent(cc.Label).string = `恭喜${item.Nick}兑换了${item.Name}`
                this.boradcast.addChild(itemCopy)
                if (index === res.list.length - 1) {
                    let self = this;
                    let j = 1;
                    let action = cc.sequence(cc.moveBy(1, 0, j * 48), cc.delayTime(2), cc.callFunc(function () {
                        if (j == res.list.length - 1) {
                            j = 1;
                            self.boradcast.setPosition(0, 24);
                        } else {
                            j++;
                        }
                    }.bind(this))).repeatForever();
                    this.boradcast.runAction(action);
                    console.log("开始滚动")
                }
            })
        }
        App.GiftCouponProxy.ConvertLog({ onSuccess, data: { page: 1, pagesize: 20, type: 1 } })
    }
    private closeEditAddress() {
        this.editAddress.active = false
    }
    private openAddressView() {
        this.editAddress.active = true
    }
    private confirmAddress(): void {
        this.userAddrInfo['name'] = this.optionsName.getComponent(cc.EditBox).string
        this.userAddrInfo['phone'] = this.optionsPhone.getComponent(cc.EditBox).string
        this.userAddrInfo['addr'] = this.optionsAddr.getComponent(cc.EditBox).string
        this.userAddrInfo['detail'] = this.optionsDetail.getComponent(cc.EditBox).string
        this.userAddrInfo['hint'] = this.optionsHint.getComponent(cc.EditBox).string
        console.log(this.userAddrInfo);
        this.editAddress.active = false
        let name = this.addressInfo.getChildByName('address_name')
        let number = this.addressInfo.getChildByName('address_number')
        let detail = this.addressInfo.getChildByName('address_detail')
        name.getComponent(cc.Label).string = this.userAddrInfo['name']
        number.getComponent(cc.Label).string = this.userAddrInfo['phone']
        detail.getComponent(cc.Label).string = this.userAddrInfo['addr'] + this.userAddrInfo['detail']
        this.chooseAddress.active = false
    }
}