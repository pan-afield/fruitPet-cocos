// Learn TypeScript:
//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html

import EventDispatcher from "../../event/EventDispatcher";
import GameEvent from "../../event/GameEvent";
import BaseUI from "../BaseUI";

const { ccclass, property } = cc._decorator;

@ccclass
export default class AllAlertView extends BaseUI {

    content: cc.Node;
    closeBtn: cc.Node;
    checkBtn: cc.Node;
    closeStatus: Boolean = false;


    /**
     * 识别所有需要操作的节点或组件
     */
    protected validateUI(): void {
        this.content = this.node.getChildByName("content");
        this.closeBtn = this.node.getChildByName("popup_close");
        this.checkBtn = this.content.getChildByName("boarTip").getChildByName("bt_suer");

        //子类在这里更新所有节点句柄
        //如：this.item = this.node.getChildByName("item");
    }


    protected updateView(): void {
        let list: cc.Node[] = this.content.children;
        let data = this.data.data;
        list.forEach((node: cc.Node, index) => {
            node.active = false;
        })
        this.content.getChildByName(data.showKey).active = true;
        let node = this.content.getChildByName(data.showKey);
        switch (data.showKey) {
            case "buySeed":
                let cp = node.getChildByName("tip2").getComponent(cc.RichText);
                let time = 2;
                let timeText = node.getChildByName("tip3").getComponent(cc.RichText);
                timeText.string = `2S后自动关闭`;
                cp.string = `获赠<color=#FA682C>${data.data.GiftCoupon}礼券</color>`;
                let callback = async function () {
                    await this.sleep(1000)
                    time -= 1;

                    timeText.string = `${time}S后自动关闭`;
                    if (time == 0) {
                        this.closeFun();
                        return;
                    }
                    callback();
                }.bind(this)
                callback && callback();
                break;
            case "boarTip":
                let tip = node.getChildByName("tip1").getComponent(cc.RichText);
                tip.string = `野猪袭击了<color=#FF7C55>${data.data.Period}</c>果园，大家齐心抵抗，\n只有<color=#FF7C55>${data.data.Name}</c>幸免于难。`;
                this.scheduleOnce(() => {
                    if (!this.closeStatus) {
                        this.closeFun();
                    }
                    this.closeStatus = false
                    EventDispatcher.dispatch(GameEvent.START_NEW_GAME);
                }, 5)
                break;

        }
    }

    private sleep(interval) {
        return new Promise((resolve, reject) => {
            setTimeout(resolve, interval);
        })
    }

    private closeFun() {
        let data = this.data.data;
        switch (data.showKey) {
            case "buySeed":
                this.close();
                EventDispatcher.dispatch(GameEvent.PLANT_END, 2);
                break;
            case "boarTip":
                this.close();
                this.closeStatus = true
                // EventDispatcher.dispatch(GameEvent.START_NEW_GAME);
                //飞水果
                EventDispatcher.dispatch(GameEvent.GET_BUY_IN, data.data)
                break;

        }
    }

    /**
     * 添加监听事件
     */
    protected initEvent(): void {
        this.closeBtn.on("click", this.closeFun, this);
        this.checkBtn.on("click", this.closeFun, this);
    }

    /**
     * 移除监听事件
     */
    protected removeEvent(): void {
        this.closeBtn.off("click", this.closeFun, this);
        this.checkBtn.off("click", this.closeFun, this);
    }
}
