// Learn TypeScript:
//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
import UIConstant from "../../constant/UIConstant";
import EventDispatcher from "../../event/EventDispatcher";
import GameEvent from "../../event/GameEvent";
import App from "../../manager/App";
import FramingManager from "../../manager/FramingManager";
import RES from "../../res/RES";
import UIUtil from "../../util/UIUtil";
import BaseUI from "../BaseUI";

const { ccclass, property } = cc._decorator;

@ccclass
export default class SeedShopView extends BaseUI {


    protected seedBox: cc.Node = null;
    protected closeBtn: cc.Node = null;
    protected currentShop = null;
    private seedShopScrollOne: cc.Node;
    private seedShopScrollTwo: cc.Node;
    protected allSeed = [];
    private toggleList: cc.Node[];
    private type: number = 0;
    private selectFoodList: Array<Object> = [];
    private seedNums: cc.Label;
    private boxItem: cc.Node;
    private settlement: cc.Node;
    private coinNum: cc.Label;
    private pigHit: cc.Node
    private progress: cc.Node


    protected validateUI(): void {
        this.closeBtn = this.node.getChildByName('close')
        this.seedBox = this.node.getChildByName("normalSeed");
        this.seedShopScrollOne = this.node.getChildByName("seedShopScroll0");
        this.seedShopScrollTwo = this.node.getChildByName("seedShopScroll1")
        this.toggleList = this.node.getChildByName("toggleContainer").children;
        this.seedNums = this.node.getChildByName("currentSelSeed").getChildByName("seedNums").getComponent(cc.Label);
        this.boxItem = this.node.getChildByName("boxItem");
        this.settlement = this.node.getChildByName("toCheck");
        this.coinNum = this.node.getChildByName("wyCoin").getChildByName("text").getComponent(cc.Label);
        this.pigHit = this.node.getChildByName('pigHit')
        this.progress = this.node.getChildByName('progressBar')
    }

    protected updateView(): void {
        this.seedNums.string = `${this.selectFoodList.length}个`
        this.type == 1 ? this.getExpress() : this.getSeedsInfo();
        this.settlement.active = !this.type ? true : false;
        this.getUserInfo();
    }
    private toDouble(num: number) {
        return num >= 10 ? num : "0" + num;
    }
    protected updateProgress(data) {
        let toTime: string = ""
        this.progress.getComponent(cc.ProgressBar).progress = data.Gameinfo.Process / 100
        if (data.Gameinfo.Countdown > 60) {
            toTime = this.toDouble(Math.floor(data.Gameinfo.Countdown / 60)) + "分" + this.toDouble(data.Gameinfo.Countdown % 60) + "秒"
        } else {
            toTime = data.Gameinfo.Countdown + "秒";
        }
        this.pigHit.getComponent(cc.RichText).string = `<color=#9AD355>危险!野猪还有<color=#A91212>${toTime}</color>入侵!请抓紧时间种植</c>`
    }
    protected getSeedsInfo() {
        this.seedShopScrollOne.active = true;
        this.seedShopScrollTwo.active = false;
        this.seedShopScrollOne.getChildByName("view").getChildByName("scrollContent").removeAllChildren();
        App.GameProxy.getSeedsInfo({
            onSuccess: function (data) {
                console.log("data", data);
                FramingManager.updateRecordList(data, this.getSeedsInfoItem, this);
                // for(let i=0;i<data.length;i++){
                //     this.getSeedsInfoItem(data[i],i);
                // }
            },
            thisObj: this
        })
    }

    private getExpress() {
        this.seedShopScrollOne.active = false;
        this.seedShopScrollTwo.active = true;
        this.seedShopScrollTwo.getChildByName("view").getChildByName("scrollContent").removeAllChildren();
        App.GameProxy.getExpress({
            onSuccess: function (data) {
                console.log("data", data);
                FramingManager.updateRecordList(data, this.getExpressItem, this);
                // for(let i=0;i<data.length;i++){
                //     this.getExpressItem(data[i],i);
                // }
            },
            thisObj: this
        })
    }

    private getSeedsInfoItem(data, index) {
        let node = cc.instantiate(this.seedBox);
        let name = node.getChildByName("seedBox").getChildByName("seedName").getComponent(cc.Label);
        let odd = node.getChildByName("seedBox").getChildByName("odds").getComponent(cc.Label);
        let num = node.getChildByName("seedBox").getChildByName("num").getComponent(cc.Label);
        let icon = node.getChildByName("seedBox").getChildByName("seedPic").getComponent(cc.Sprite);
        node.parent = this.seedShopScrollOne.getChildByName("view").getChildByName("scrollContent");
        num.string = data.Num;
        odd.string = data.Odds;
        name.string = data.Name;
        RES.setSpriteFrame(icon, `common/fruit/img_fruit_${data.Num}`);
        node["data"] = data;
        node.off("click", this.selectFood, this);
        node.on("click", this.selectFood, this);
        node.active = true;
    }

    private selectFood(evt: cc.Button) {
        let node: cc.Node = evt.target || evt.node;
        let icon: cc.Sprite = node.getChildByName("seedBox").getComponent(cc.Sprite);
        let checkIcon: cc.Sprite = node.getChildByName("seedBox").getChildByName("choose_nor").getComponent(cc.Sprite);
        let data = node["data"];
        if (this.selectFoodList.indexOf(data) != -1) {
            let ids = this.selectFoodList.indexOf(data);
            this.selectFoodList.splice(ids, 1);
            RES.setSpriteFrame(icon, `view/seedShop/seed_nor`);
            RES.setSpriteFrame(checkIcon, `view/seedShop/choose_nor`);
        } else {
            this.selectFoodList.push(data);
            RES.setSpriteFrame(icon, `view/seedShop/seed_sel`);
            RES.setSpriteFrame(checkIcon, `view/seedShop/choose_sel`);
        }
        this.seedNums.string = `${this.selectFoodList.length}个`
        console.log("this.selectFoodList", this.selectFoodList)
    }

    private getExpressItem(data, index) {
        let node = cc.instantiate(this.boxItem);
        let text = node.getChildByName("text").getComponent(cc.Label);
        if (data.NumArr.length >= 14) {
            RES.setSpriteFrame(node.getChildByName('fruitBox').getComponent(cc.Sprite), 'view/seedShop/fruitBox_big')
        } else if (data.NumArr.length >= 7) {
            RES.setSpriteFrame(node.getChildByName('fruitBox').getComponent(cc.Sprite), 'view/seedShop/fruitBox_middle')
        } else {
            RES.setSpriteFrame(node.getChildByName('fruitBox').getComponent(cc.Sprite), 'view/seedShop/fruitBox_small')
        }
        text.string = data.Name;
        node.active = true;
        node["data"] = data;
        node.off("click", this.selectExpress, this);
        node.on("click", this.selectExpress, this);
        node.parent = this.seedShopScrollTwo.getChildByName("view").getChildByName("scrollContent");
    }

    private selectExpress(evt: cc.Button) {
        let node = evt.target || evt.node;
        let data = node["data"];
        if (!data) return;
        this.selectFoodList = data.NumArr;
        this.settlementInfo(null, data.Num, data.Name);
    }

    private toggle(evt: cc.Toggle) {
        let node = evt.target || evt.node;
        let type = node["type"];
        if (this.type == type) return;
        this.type = type;
        type == 1 ? this.getExpress() : this.getSeedsInfo();
        this.settlement.active = !this.type ? true : false
    }


    /**
* 增加监听事件
*/
    protected initEvent(): void {
        EventDispatcher.addListener(GameEvent.UPDATE_PROGRESS, this.updateProgress, this)
        this.closeBtn.on("click", this.close, this);
        this.settlement.on("click", this.settlementInfo, this);
        this.toggleList.forEach((item, index) => {
            item["type"] = index;
            item.on("toggle", this.toggle, this);
        })
    }

    /**
     * 移除监听事件
     */
    protected removeEvent(): void {
        EventDispatcher.removeListener(GameEvent.UPDATE_PROGRESS, this.updateProgress, this)
        this.closeBtn.off("click", this.close, this);
        this.settlement.off("click", this.settlementInfo, this);
        this.toggleList.forEach((item, index) => {
            item["type"] = index;
            item.off("toggle", this.toggle, this);
        })
    }

    private settlementInfo(evt: cc.Button, num?: number, name?) {
        if (this.selectFoodList.length == 0) return;
        App.ui.open(UIConstant.BuySeedView, null, {
            data: {
                selectFoodList: this.selectFoodList,
                num: num || 0,
                name: name || ''
            },
            // closeCallBack:function(){
            //     App.ui.open(UIConstant.SeedShopView)
            // }
        });
        this.selectFoodList = [];
        this.close();
    }

    private getUserInfo() {
        App.UserProxy.getUserInfo({
            onSuccess: function (data) {
                this.coinNum.string = UIUtil.toStone(data.coin);
            },
            thisObj: this
        })
    }
}

